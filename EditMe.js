// Generated by CoffeeScript 1.4.0
(function() {
  var __slice = [].slice;

  (function($) {
    var applyStyles, createEditInput, createHiddenInput, getInputName, log, methods, opts, pluginName;
    pluginName = 'editMe';
    opts = {};
    methods = {
      init: function(options) {
        opts = $.extend({
          activateEvent: 'click dblclick',
          deactivateEvent: 'blur',
          syncEvent: 'change keyup input',
          "class": '',
          type: 'text',
          options: false,
          hiddenPrefix: 'hidden_',
          hiddenSuffix: '',
          debug: true
        }, options);
        return this.each(function() {
          var el, inputName;
          el = $(this);
          inputName = getInputName(el);
          if (inputName) {
            el.data('EditMe', {
              name: inputName,
              hidden: null,
              edit: null
            });
            createHiddenInput(el, opts);
            return el.on(opts.activateEvent, function(event) {
              return el.editMe('activate', event);
            });
          } else {
            return log('Can\'t determine input name. Element was skipped ', el);
          }
        });
      },
      activate: function() {
        var data;
        data = this.data("EditMe");
        if (!data.edit) {
          createEditInput(this);
        }
        data.edit.show().focus();
        return this.hide();
      },
      deactivate: function(event) {
        var data, edit, value;
        data = this.data('EditMe');
        edit = data.edit;
        console.log('deactivate', edit.val(), arguments);
        if (!edit) {
          return this;
        }
        value = edit.val();
        edit.hide().remove();
        this.text(value).show();
        data.hidden.val(value);
        return data.edit = null;
      },
      toggle: function(event) {
        if (!this.data('EditMe')) {
          log("Element doest\'t initialized with plugin " + pluginName, this);
          return this;
        }
        log(this.data('EditMe'));
        if (this.data('EditMe').edit) {
          return this.editMe('deactivate');
        } else {
          return this.editMe('activate');
        }
      },
      change: function(event) {
        var input, value;
        input = $(event.target);
        value = input.val();
        this.text(value);
        input.next().val(value);
        return console.log('changed', $(this), value, input);
      }
    };
    getInputName = function(el) {
      var id, inputName, name;
      inputName = (id = el.attr('id')) ? id : null;
      if (name = el.data('name')) {
        inputName = name;
      }
      return inputName;
    };
    createHiddenInput = function(el) {
      var hidden;
      hidden = $("<input/>", {
        name: "" + opts.hiddenPrefix + (el.data('EditMe').name) + opts.hiddenSuffix,
        type: "hidden",
        value: $.trim(el.text())
      });
      el.after(hidden);
      return el.data('EditMe').hidden = hidden;
    };
    createEditInput = function(el) {
      var input;
      input = $('<input/>', {
        type: "text",
        "class": "editMe",
        value: $.trim(el.text())
      });
      input.on(opts.deactivateEvent, function(event) {
        return el.editMe('deactivate', event);
      });
      input.on(opts.syncEvent, function(event) {
        return el.editMe('change', event);
      });
      el.after(input);
      el.data('EditMe').edit = input;
      return applyStyles(el, input);
    };
    applyStyles = function(src, dest) {
      dest.height(src.height());
      return dest.width(src.width());
    };
    log = function() {
      var msg, other;
      msg = arguments[0], other = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (opts.debug) {
        return console.log("DUBUG:", msg, other);
      }
    };
    return $.fn.editMe = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === 'object' || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return log("Method " + method + " does not exist on jQuery." + pluginName);
      }
    };
  })(jQuery);

}).call(this);

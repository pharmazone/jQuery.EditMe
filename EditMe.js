// Generated by CoffeeScript 1.4.0
(function() {

  (function($) {
    var createInput, methods, pluginName;
    pluginName = 'editMe';
    methods = {
      init: function(options) {
        var opts;
        opts = $.extend({
          activateEvent: 'click dblclick',
          deactivateEvent: 'blur',
          "class": '',
          type: 'text',
          options: false
        }, options);
        return this.each(function() {
          var el;
          el = $(this);
          return createInput(el, opts);
        });
      },
      activate: function() {
        this.next().show().focus();
        this.hide();
        return console.log('activate', this, arguments);
      },
      deactivate: function(event) {
        var input, value;
        console.log('deactivate', this, arguments);
        input = $(event.target);
        value = input.val();
        this.text(value);
        this.next().next().val(value);
        this.show();
        return input.hide();
      },
      toggle: function(event) {},
      change: function(event) {
        var input, value;
        input = $(event.target);
        value = input.val();
        this.text(value);
        input.next().val(value);
        return console.log('changed', $(this), value, input);
      }
    };
    createInput = function(el, opts) {
      var hidden, id, input, inputName, name;
      inputName = (id = el.attr('id')) ? id : null;
      if (name = el.data('name')) {
        inputName = name;
      }
      if (!inputName) {
        return;
      }
      el.on(opts.activateEvent, function(event) {
        return el.editMe('activate', event);
      });
      hidden = $("<input/>", {
        name: 'hidden_' + inputName,
        type: "hidden",
        value: $.trim(el.text())
      });
      el.after(hidden);
      input = $('<input/>', {
        name: 'input_' + inputName,
        type: "text",
        "class": "editMe editField",
        value: $.trim(el.text())
      }).hide();
      el.after(input);
      input.on(opts.deactivateEvent, function(event) {
        return el.editMe('deactivate', event);
      });
      input.on('change keyup input', function(event) {
        return el.editMe('change', event);
      });
      input.height(el.height());
      return input.width(el.width());
    };
    return $.fn.editMe = function(method) {
      if (methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
      } else if (typeof method === 'object' || !method) {
        return methods.init.apply(this, arguments);
      } else {
        return console.log("Method " + method + " does not exist on jQuery." + pluginName);
      }
    };
  })(jQuery);

}).call(this);
